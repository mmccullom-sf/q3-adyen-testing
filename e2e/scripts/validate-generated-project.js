/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

const {program, Argument} = require('commander')
const {diffArrays} = require('./utils.js')
const fs = require('fs')
const config = require('../config.js')
const path = require('path')

const validateGeneratedArtifacts = async (project) => {
    try {
        const generatedProjectDirPath = path.join(process.cwd(), config.GENERATED_PROJECTS_DIR, project)
        const generatedArtifacts = fs.readdirSync(generatedProjectDirPath)

    return new Promise((resolve, reject) => {
        const missingArtifacts = diffArrays(
            config.EXPECTED_GENERATED_ARTIFACTS[project],
            generatedArtifacts
        )
        if (missingArtifacts && missingArtifacts.length > 0) {
            reject(
                `Generated project (${project}) is missing one or more artifacts: ${missingArtifacts}`
            )
        } else {
                resolve(`Successfully validated generated artifacts for: ${project} `)
            }
        })
    } catch (err) {
        reject(`Generated project (${project}) is missing one or more artifacts: ${err}`)
    }
}

const validateExtensibilityConfig = async (project, templateVersion) => {
    const pkgPath = path.join(process.cwd(), config.GENERATED_PROJECTS_DIR, project, 'package.json')
    const pkg = require(pkgPath)
    return new Promise((resolve, reject) => {
        if (
            !pkg.hasOwnProperty('ccExtensibility') ||
            !pkg['ccExtensibility'].hasOwnProperty('extends') ||
            !pkg['ccExtensibility'].hasOwnProperty('overridesDir') ||
            !pkg['ccExtensibility'].extends === '@salesforce/retail-react-app' ||
            !pkg['ccExtensibility'].overridesDir === 'overrides'
        ) {
            reject(`Generated project ${project} is missing extensibility config in package.json`)
        }

        if (templateVersion && pkg.version !== templateVersion) {
            reject(
                `Generated project ${project} is using an incorrect template version. Expected ${templateVersion}, but got ${pkg.version}.`
            )
        }
        resolve(`Successfully validated extensibility config for ${project}`)
    })
}

const main = async (opts) => {
    const {args} = opts
    const [project, templateVersion] = args
    if (opts.args.length !== 1) {
        console.log(program.helpInformation())
        process.exit(1)
    }

    try {
        console.log(await validateGeneratedArtifacts(project))
        if (project === 'retail-app-ext' || project === 'retail-app-ext') {
            console.log(await validateExtensibilityConfig(project, templateVersion))
        }
    } catch (err) {
        console.error(err)
    }
}

program
    .description(`Validate project generated by generator using the key <project-key>`)
    .addArgument(
        new Argument('<project-key>', 'project key').choices([
            'retail-app-demo',
            'retail-app-ext',
            'retail-app-no-ext',
            'retail-app-private-client'
        ])
    )
    .option('--templateVersion <templateVersion>', 'Template version used to generate the project')

program.parse(process.argv)

main(program)
