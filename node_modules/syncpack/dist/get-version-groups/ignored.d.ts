import * as Data from '@effect/data/Data';
import * as Effect from '@effect/io/Effect';
import { VersionGroupReport } from '.';
import type { VersionGroupConfig } from '../config/types';
import type { Instance } from '../instance';
declare const IgnoredVersionGroup_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "Ignored";
}>;
export declare class IgnoredVersionGroup extends IgnoredVersionGroup_base<{
    config: VersionGroupConfig.Ignored;
    instances: Instance.Any[];
}> {
    constructor(config: VersionGroupConfig.Ignored);
    canAdd(_: Instance.Any): boolean;
    inspect(): Effect.Effect<never, never, VersionGroupReport.Ignored>[];
}
export {};
