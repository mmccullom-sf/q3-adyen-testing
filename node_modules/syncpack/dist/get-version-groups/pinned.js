"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinnedVersionGroup = void 0;
const Data = __importStar(require("@effect/data/Data"));
const Effect = __importStar(require("@effect/io/Effect"));
const _1 = require(".");
const group_by_1 = require("./lib/group-by");
class PinnedVersionGroup extends Data.TaggedClass('Pinned') {
    constructor(config) {
        super({
            config,
            instances: [],
        });
    }
    canAdd(_) {
        return true;
    }
    inspect() {
        const instancesByName = (0, group_by_1.groupBy)('name', this.instances);
        const expectedVersion = this.config.pinVersion;
        return Object.entries(instancesByName).map(([name, instances]) => {
            if (hasMismatch(expectedVersion, instances)) {
                return Effect.fail(new _1.VersionGroupReport.PinnedMismatch({
                    name,
                    instances,
                    isValid: false,
                    expectedVersion,
                }));
            }
            else {
                return Effect.succeed(new _1.VersionGroupReport.Valid({
                    name,
                    instances,
                    isValid: true,
                }));
            }
        });
    }
}
exports.PinnedVersionGroup = PinnedVersionGroup;
function hasMismatch(pinVersion, instances) {
    return instances.some((instance) => instance.specifier !== pinVersion);
}
