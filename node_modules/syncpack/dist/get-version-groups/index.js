"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVersionGroups = exports.VersionGroupConfigError = exports.VersionGroupReport = void 0;
const Data = __importStar(require("@effect/data/Data"));
const Function_1 = require("@effect/data/Function");
const Effect = __importStar(require("@effect/io/Effect"));
const is_array_of_strings_1 = require("tightrope/guard/is-array-of-strings");
const is_non_empty_array_1 = require("tightrope/guard/is-non-empty-array");
const is_non_empty_string_1 = require("tightrope/guard/is-non-empty-string");
const is_object_1 = require("tightrope/guard/is-object");
const get_enabled_types_1 = require("../config/get-enabled-types");
const can_add_to_group_1 = require("../guards/can-add-to-group");
const sort_by_name_1 = require("../lib/sort-by-name");
const banned_1 = require("./banned");
const filtered_out_1 = require("./filtered-out");
const ignored_1 = require("./ignored");
const pinned_1 = require("./pinned");
const same_range_1 = require("./same-range");
const snapped_to_1 = require("./snapped-to");
const standard_1 = require("./standard");
var VersionGroupReport;
(function (VersionGroupReport) {
    /**
     * Every instance in this `BannedVersionGroup` matched its configuration and
     * will be removed if fixed
     */
    class Banned extends Data.TaggedClass('Banned') {
    }
    VersionGroupReport.Banned = Banned;
    /**
     * Every instance in this `FilteredOutVersionGroup` has name which does not
     * match the RegExp produced by the `--filter` option.
     */
    class FilteredOut extends Data.TaggedClass('FilteredOut') {
    }
    VersionGroupReport.FilteredOut = FilteredOut;
    /**
     * One or more instances has a version which is not identical to the others,
     * to resolve this issue the highest semver version present should be used
     */
    class HighestSemverMismatch extends Data.TaggedClass('HighestSemverMismatch') {
    }
    VersionGroupReport.HighestSemverMismatch = HighestSemverMismatch;
    /**
     * Every instance in this `IgnoredVersionGroup` matched its configuration
     */
    class Ignored extends Data.TaggedClass('Ignored') {
    }
    VersionGroupReport.Ignored = Ignored;
    /**
     * One or more instances has a version which is not identical to the others,
     * to resolve this issue the lowest semver version present should be used
     */
    class LowestSemverMismatch extends Data.TaggedClass('LowestSemverMismatch') {
    }
    VersionGroupReport.LowestSemverMismatch = LowestSemverMismatch;
    /**
     * One or more instances has a version which is not identical to the
     * `pinVersion` value set in this `PinnedVersionGroup`
     */
    class PinnedMismatch extends Data.TaggedClass('PinnedMismatch') {
    }
    VersionGroupReport.PinnedMismatch = PinnedMismatch;
    /**
     * One or more instances has a version which is not satisfied by the semver
     * version ranges defined by every other instance of this same dependency. In
     * a `SameRangeVersionGroup`, each version does not have to be indentical, but
     * they do have to all satisfy the ranges set by the others.
     */
    class SameRangeMismatch extends Data.TaggedClass('SameRangeMismatch') {
    }
    VersionGroupReport.SameRangeMismatch = SameRangeMismatch;
    /**
     * One or more instances has a version which does not match the version used
     * in any of the locally developed packages whose names are set in the
     * `snapTo` array of this `SnappedToVersionGroup`
     */
    class SnappedToMismatch extends Data.TaggedClass('SnappedToMismatch') {
    }
    VersionGroupReport.SnappedToMismatch = SnappedToMismatch;
    /**
     * One or more instances has a version which does not match the others and
     * also, at least one of the instances has a version which is not semver.
     * Syncpack cannot guess what any given Developer will want to do in this
     * situation
     */
    class NonSemverMismatch extends Data.TaggedClass('NonSemverMismatch') {
    }
    VersionGroupReport.NonSemverMismatch = NonSemverMismatch;
    /**
     * Every instance satisfies the rules of the Version Group they belong to
     */
    class Valid extends Data.TaggedClass('Valid') {
    }
    VersionGroupReport.Valid = Valid;
    /**
     * This dependency is one of the packages developed in this monorepo and one
     * or more of the packages in this monorepo depend on it with a version which
     * is not identical to the `.version` property of its package.json file
     */
    class LocalPackageMismatch extends Data.TaggedClass('LocalPackageMismatch') {
    }
    VersionGroupReport.LocalPackageMismatch = LocalPackageMismatch;
})(VersionGroupReport || (exports.VersionGroupReport = VersionGroupReport = {}));
class VersionGroupConfigError extends Data.TaggedClass('VersionGroupConfigError') {
}
exports.VersionGroupConfigError = VersionGroupConfigError;
function getVersionGroups(ctx) {
    return (0, Function_1.pipe)(Effect.Do, Effect.bind('enabledTypes', () => (0, get_enabled_types_1.getEnabledTypes)(ctx.config)), Effect.bind('versionGroups', () => createVersionGroups(ctx)), Effect.flatMap(({ enabledTypes, versionGroups }) => {
        for (const file of ctx.packageJsonFiles) {
            instances: for (const instance of file.getInstances(enabledTypes)) {
                for (const group of versionGroups) {
                    if ((0, can_add_to_group_1.canAddToGroup)(group, instance)) {
                        group.instances.push(instance);
                        continue instances;
                    }
                }
            }
        }
        return Effect.succeed(versionGroups.filter((group) => (0, is_non_empty_array_1.isNonEmptyArray)(group.instances.sort(sort_by_name_1.sortByName))));
    }));
}
exports.getVersionGroups = getVersionGroups;
function createVersionGroups(ctx) {
    const { rcFile } = ctx.config;
    const versionGroups = [
        Effect.succeed(new filtered_out_1.FilteredOutVersionGroup(ctx)),
    ];
    if ((0, is_non_empty_array_1.isNonEmptyArray)(rcFile.versionGroups)) {
        rcFile.versionGroups.forEach((config) => {
            if (!(0, is_object_1.isObject)(config)) {
                return versionGroups.push(Effect.fail(new VersionGroupConfigError({
                    config,
                    error: 'config is not an object',
                })));
            }
            if (!(0, is_array_of_strings_1.isArrayOfStrings)(config.dependencies)) {
                return versionGroups.push(Effect.fail(new VersionGroupConfigError({
                    config,
                    error: 'config.dependencies is not an array of strings',
                })));
            }
            if (!(0, is_array_of_strings_1.isArrayOfStrings)(config.packages)) {
                return versionGroups.push(Effect.fail(new VersionGroupConfigError({
                    config,
                    error: 'config.packages is not an array of strings',
                })));
            }
            const mutuallyExclusiveProps = ['isBanned', 'isIgnored', 'pinVersion', 'snapTo', 'policy'].filter((prop) => Boolean(config[prop]));
            if (mutuallyExclusiveProps.length > 1) {
                return versionGroups.push(Effect.fail(new VersionGroupConfigError({
                    config,
                    error: `it's unclear what kind of version group you want, as it contains both ${mutuallyExclusiveProps.join(' and ')}`,
                })));
            }
            const { dependencies, packages } = config;
            const label = (0, is_non_empty_string_1.isNonEmptyString)(config.label) ? config.label : '';
            const dependencyTypes = (0, is_array_of_strings_1.isArrayOfStrings)(config.dependencyTypes)
                ? config.dependencyTypes
                : [];
            if (config.isBanned === true) {
                versionGroups.push(Effect.succeed(new banned_1.BannedVersionGroup({
                    dependencies,
                    dependencyTypes,
                    isBanned: true,
                    label,
                    packages,
                })));
            }
            else if (config.isIgnored === true) {
                versionGroups.push(Effect.succeed(new ignored_1.IgnoredVersionGroup({
                    dependencies,
                    dependencyTypes,
                    isIgnored: true,
                    label,
                    packages,
                })));
            }
            else if ((0, is_non_empty_string_1.isNonEmptyString)(config.pinVersion)) {
                versionGroups.push(Effect.succeed(new pinned_1.PinnedVersionGroup({
                    dependencies,
                    dependencyTypes,
                    label,
                    packages,
                    pinVersion: config.pinVersion,
                })));
            }
            else if ((0, is_array_of_strings_1.isArrayOfStrings)(config.snapTo)) {
                versionGroups.push(Effect.succeed(new snapped_to_1.SnappedToVersionGroup({
                    dependencies,
                    dependencyTypes,
                    label,
                    packages,
                    snapTo: config.snapTo,
                })));
            }
            else if (config.policy === 'sameRange') {
                versionGroups.push(Effect.succeed(new same_range_1.SameRangeVersionGroup({
                    dependencies,
                    dependencyTypes,
                    label,
                    packages,
                    policy: config.policy,
                })));
            }
            else {
                versionGroups.push(Effect.succeed(new standard_1.StandardVersionGroup(false, {
                    dependencies,
                    dependencyTypes,
                    label,
                    packages,
                    preferVersion: config.preferVersion === 'lowestSemver' ? 'lowestSemver' : 'highestSemver',
                })));
            }
        });
    }
    versionGroups.push(Effect.succeed(new standard_1.StandardVersionGroup(true, {
        dependencies: ['**'],
        packages: ['**'],
        preferVersion: 'highestSemver',
    })));
    return Effect.all(versionGroups);
}
