"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardVersionGroup = void 0;
const Data = __importStar(require("@effect/data/Data"));
const Option = __importStar(require("@effect/data/Option"));
const Effect = __importStar(require("@effect/io/Effect"));
const unwrap_1 = require("tightrope/result/unwrap");
const _1 = require(".");
const get_highest_version_1 = require("./lib/get-highest-version");
const get_lowest_version_1 = require("./lib/get-lowest-version");
const get_unique_specifiers_1 = require("./lib/get-unique-specifiers");
const group_by_1 = require("./lib/group-by");
class StandardVersionGroup extends Data.TaggedClass('Standard') {
    constructor(isCatchAll, config) {
        super({
            config,
            instances: [],
            isCatchAll,
        });
    }
    canAdd(_) {
        return true;
    }
    inspect() {
        const instancesByName = (0, group_by_1.groupBy)('name', this.instances);
        return Object.entries(instancesByName).map(([name, instances]) => {
            var _a;
            if (!hasMismatch(instances)) {
                return Effect.succeed(new _1.VersionGroupReport.Valid({
                    name,
                    instances,
                    isValid: true,
                }));
            }
            if (hasNonSemverSpecifiers(instances)) {
                return Effect.fail(new _1.VersionGroupReport.NonSemverMismatch({
                    name,
                    instances,
                    isValid: false,
                }));
            }
            const localPackageInstance = getLocalPackageInstance(instances);
            const localPackageFile = localPackageInstance === null || localPackageInstance === void 0 ? void 0 : localPackageInstance.packageJsonFile;
            const localPackageVersion = (_a = localPackageFile === null || localPackageFile === void 0 ? void 0 : localPackageFile.contents) === null || _a === void 0 ? void 0 : _a.version;
            const isLocalPackage = localPackageInstance && localPackageVersion;
            if (isLocalPackage) {
                return Effect.fail(new _1.VersionGroupReport.LocalPackageMismatch({
                    name,
                    instances,
                    isValid: false,
                    expectedVersion: localPackageVersion,
                    localPackageInstance,
                }));
            }
            const preferVersion = this.config.preferVersion;
            const expectedVersion = getExpectedVersion(preferVersion, instances);
            return Effect.fail(preferVersion === 'highestSemver'
                ? new _1.VersionGroupReport.HighestSemverMismatch({
                    name,
                    instances,
                    isValid: false,
                    expectedVersion,
                })
                : new _1.VersionGroupReport.LowestSemverMismatch({
                    name,
                    instances,
                    isValid: false,
                    expectedVersion,
                }));
        });
    }
}
exports.StandardVersionGroup = StandardVersionGroup;
function getExpectedVersion(preferVersion, instances) {
    const versions = (0, get_unique_specifiers_1.getUniqueSpecifiers)(instances).map((i) => i.specifier);
    return (0, unwrap_1.unwrap)(preferVersion === 'highestSemver' ? (0, get_highest_version_1.getHighestVersion)(versions) : (0, get_lowest_version_1.getLowestVersion)(versions));
}
function hasMismatch(instances) {
    return (0, get_unique_specifiers_1.getUniqueSpecifiers)(instances).length > 1;
}
function hasNonSemverSpecifiers(instances) {
    return instances.some((instance) => Option.isNone(instance.getSemverSpecifier()));
}
function getLocalPackageInstance(instances) {
    return instances.find((instance) => instance.strategy.name === 'localPackage');
}
