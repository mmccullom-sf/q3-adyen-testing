"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilePaths = exports.NoSourcesFoundError = void 0;
const Data = __importStar(require("@effect/data/Data"));
const Function_1 = require("@effect/data/Function");
const Effect = __importStar(require("@effect/io/Effect"));
const uniq_1 = require("tightrope/array/uniq");
const is_non_empty_array_1 = require("tightrope/guard/is-non-empty-array");
const constants_1 = require("../constants");
const tags_1 = require("../env/tags");
const get_patterns_1 = require("./get-patterns");
class NoSourcesFoundError extends Data.TaggedClass('NoSourcesFoundError') {
}
exports.NoSourcesFoundError = NoSourcesFoundError;
/**
 * Using --source options and/or config files on disk from
 * npm/pnpm/yarn/lerna, return an array of absolute paths to every package.json
 * file the user is working with.
 *
 * @returns Array of absolute file paths to package.json files
 */
function getFilePaths(config) {
    return (0, Function_1.pipe)((0, get_patterns_1.getPatterns)(config), Effect.flatMap((patterns) => (0, Function_1.pipe)(tags_1.EnvTag, Effect.flatMap((env) => env.globSync(patterns)), Effect.map((arr) => (0, uniq_1.uniq)(arr.flat())), Effect.flatMap((filePaths) => (0, is_non_empty_array_1.isNonEmptyArray)(filePaths)
        ? Effect.succeed(filePaths)
        : Effect.fail(new NoSourcesFoundError({ CWD: constants_1.CWD, patterns }))))));
}
exports.getFilePaths = getFilePaths;
