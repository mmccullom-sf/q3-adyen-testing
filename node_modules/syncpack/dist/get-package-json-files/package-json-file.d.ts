import type { Strategy } from '../config/get-custom-types';
import type { Ctx } from '../get-context';
import type { Instance } from '../instance';
import type { JsonFile } from './get-patterns/read-json-safe';
export interface PackageJson {
    bugs?: {
        url: string;
    } | string;
    dependencies?: Record<string, string>;
    description?: string;
    devDependencies?: Record<string, string>;
    keywords?: string[];
    name?: string;
    overrides?: Record<string, string>;
    peerDependencies?: Record<string, string>;
    pnpm?: {
        overrides?: Record<string, string>;
    };
    repository?: {
        directory?: string;
        type: string;
        url: string;
    } | string;
    resolutions?: Record<string, string>;
    scripts?: Record<string, string>;
    version?: string;
    workspaces?: string[] | {
        packages?: string[];
    };
    [otherProps: string]: Record<string, string | string[] | Record<string, string | string[]>> | string | string[] | undefined;
}
export declare class PackageJsonFile {
    /** parsed JSON contents of the file */
    contents: PackageJson;
    /** absolute path on disk to this file */
    readonly filePath: string;
    /** absolute path on disk to this file's directory */
    readonly dirPath: string;
    /** raw file contents of the file */
    readonly json: string;
    /** resolved configuration */
    readonly config: Ctx['config'];
    /** relative path on disk to this file */
    readonly shortPath: string;
    constructor(jsonFile: JsonFile<PackageJson>, config: Ctx['config']);
    getInstances(enabledTypes: Strategy.Any[]): Instance.Any[];
}
