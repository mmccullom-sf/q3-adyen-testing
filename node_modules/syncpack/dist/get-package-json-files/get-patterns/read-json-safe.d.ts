import * as Data from '@effect/data/Data';
import * as Effect from '@effect/io/Effect';
import type { Env } from '../../env/create-env';
import type { ReadFileError } from '../../env/tags';
export interface JsonFile<T> {
    /** absolute path on disk to this file */
    readonly filePath: string;
    /** parsed JSON contents of the file */
    contents: T;
    /** raw file contents of the file */
    readonly json: string;
}
declare const JsonParseError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "JsonParseError";
}>;
export declare class JsonParseError extends JsonParseError_base<{
    readonly error: string;
    readonly filePath: string;
    readonly json: string;
}> {
}
export declare function readJsonSafe<T>(filePath: string): Effect.Effect<Env, ReadFileError | JsonParseError, JsonFile<T>>;
export {};
