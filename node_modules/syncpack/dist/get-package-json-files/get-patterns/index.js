"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPatterns = void 0;
const Function_1 = require("@effect/data/Function");
const O = __importStar(require("@effect/data/Option"));
const Effect = __importStar(require("@effect/io/Effect"));
const is_array_of_strings_1 = require("tightrope/guard/is-array-of-strings");
const get_source_1 = require("../../config/get-source");
const constants_1 = require("../../constants");
const get_lerna_patterns_1 = require("./get-lerna-patterns");
const get_pnpm_patterns_1 = require("./get-pnpm-patterns");
const get_yarn_patterns_1 = require("./get-yarn-patterns");
/**
 * Find every glob pattern which should be used to find package.json files for
 * this monorepo.
 *
 * @returns `['./package.json', './packages/* /package.json']`
 */
function getPatterns(config) {
    return (0, Function_1.pipe)(getCliPatterns(), Effect.flatMap((option) => (O.isSome(option) ? Effect.succeed(option) : (0, get_yarn_patterns_1.getYarnPatterns)())), Effect.flatMap((option) => (O.isSome(option) ? Effect.succeed(option) : (0, get_pnpm_patterns_1.getPnpmPatterns)())), Effect.flatMap((option) => (O.isSome(option) ? Effect.succeed(option) : (0, get_lerna_patterns_1.getLernaPatterns)())), Effect.map((option) => (0, Function_1.pipe)(option, O.map(addRootDir), O.map(limitToPackageJson), O.getOrElse(() => constants_1.DEFAULT_SOURCES))));
    function getCliPatterns() {
        return (0, Function_1.pipe)(O.some((0, get_source_1.getSource)(config)), O.filter(is_array_of_strings_1.isArrayOfStrings), Effect.succeed);
    }
    function addRootDir(patterns) {
        return ['package.json', ...patterns];
    }
    function limitToPackageJson(patterns) {
        return patterns.map((pattern) => pattern.includes('package.json') ? pattern : `${pattern}/package.json`);
    }
}
exports.getPatterns = getPatterns;
