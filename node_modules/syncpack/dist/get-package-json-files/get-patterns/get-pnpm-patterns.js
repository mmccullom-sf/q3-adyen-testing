"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPnpmPatterns = void 0;
const Function_1 = require("@effect/data/Function");
const O = __importStar(require("@effect/data/Option"));
const Effect = __importStar(require("@effect/io/Effect"));
const path_1 = require("path");
const is_array_of_strings_1 = require("tightrope/guard/is-array-of-strings");
const constants_1 = require("../../constants");
const tags_1 = require("../../env/tags");
function getPnpmPatterns() {
    return (0, Function_1.pipe)(
    // packages:
    //   - "packages/**"
    //   - "components/**"
    //   - "!**/test/**"
    tags_1.EnvTag, Effect.flatMap((env) => env.readYamlFileSync((0, path_1.join)(constants_1.CWD, 'pnpm-workspace.yaml'))), Effect.map((file) => ((0, is_array_of_strings_1.isArrayOfStrings)(file === null || file === void 0 ? void 0 : file.packages) ? O.some(file.packages) : O.none())), Effect.catchTags({
        ReadYamlFileError: () => Effect.succeed(O.none()),
    }));
}
exports.getPnpmPatterns = getPnpmPatterns;
