import * as Data from '@effect/data/Data';
import * as Effect from '@effect/io/Effect';
import { type Env } from '../env/create-env';
import type { GlobError } from '../env/tags';
import type { Ctx } from '../get-context';
declare const NoSourcesFoundError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "NoSourcesFoundError";
}>;
export declare class NoSourcesFoundError extends NoSourcesFoundError_base<{
    readonly CWD: string;
    readonly patterns: string[];
}> {
}
/**
 * Using --source options and/or config files on disk from
 * npm/pnpm/yarn/lerna, return an array of absolute paths to every package.json
 * file the user is working with.
 *
 * @returns Array of absolute file paths to package.json files
 */
export declare function getFilePaths(config: Ctx['config']): Effect.Effect<Env, GlobError | NoSourcesFoundError, string[]>;
export {};
