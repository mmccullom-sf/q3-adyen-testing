"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = void 0;
const Data = __importStar(require("@effect/data/Data"));
const Function_1 = require("@effect/data/Function");
const Option = __importStar(require("@effect/data/Option"));
const delete_1 = require("../get-version-groups/lib/delete");
const _R_1 = require("../lib/$R");
var Instance;
(function (Instance) {
    /** An `Instance` whose specifier is a path to a local file or directory */
    class FileInstance extends Data.TaggedClass('FileInstance') {
        constructor() {
            super(...arguments);
            this.setSpecifier = setSpecifier;
        }
        getSemverSpecifier() {
            return Option.none();
        }
    }
    Instance.FileInstance = FileInstance;
    /** An `Instance` whose specifier is a Git URL */
    class HostedGitInstance extends Data.TaggedClass('HostedGitInstance') {
        constructor() {
            super(...arguments);
            this.setSpecifier = setSpecifier;
        }
        getSemverSpecifier() {
            // @TODO: If git tag is semver, return that
            return Option.none();
        }
    }
    Instance.HostedGitInstance = HostedGitInstance;
    /** An `Instance` whose specifier is a URL to a tarball */
    class UrlInstance extends Data.TaggedClass('URLInstance') {
        constructor() {
            super(...arguments);
            this.setSpecifier = setSpecifier;
        }
        getSemverSpecifier() {
            // @TODO: If file name is semver, return that
            return Option.none();
        }
    }
    Instance.UrlInstance = UrlInstance;
    /** An `Instance` whose specifier is eg "npm:imageoptim-cli@3.1.7" */
    class AliasInstance extends Data.TaggedClass('AliasInstance') {
        setSpecifier(version) {
            if (version === delete_1.DELETE) {
                setSpecifier.call(this, version);
            }
            else {
                const subSpec = this.parsedSpecifier.subSpec;
                const name = subSpec.name || '';
                const specifier = `npm:${name}@${version}`;
                setSpecifier.call(this, specifier);
            }
        }
        getSemverSpecifier() {
            const subSpec = this.parsedSpecifier.subSpec;
            if (['range', 'version'].includes(subSpec.type) && subSpec.fetchSpec !== null) {
                return Option.some(subSpec.fetchSpec);
            }
            return Option.none();
        }
    }
    Instance.AliasInstance = AliasInstance;
    /** An `Instance` whose specifier is exact semver */
    class VersionInstance extends Data.TaggedClass('VersionInstance') {
        constructor() {
            super(...arguments);
            this.setSpecifier = setSpecifier;
        }
        getSemverSpecifier() {
            return Option.some(this.parsedSpecifier.fetchSpec);
        }
    }
    Instance.VersionInstance = VersionInstance;
    /** An `Instance` whose specifier is eg. "*" or "^1.2.3" */
    class RangeInstance extends Data.TaggedClass('RangeInstance') {
        constructor() {
            super(...arguments);
            this.setSpecifier = setSpecifier;
        }
        getSemverSpecifier() {
            return Option.some(this.parsedSpecifier.fetchSpec);
        }
    }
    Instance.RangeInstance = RangeInstance;
    /** An `Instance` whose specifier is eg. "latest" or "made-up-by-some-dev" */
    class TagInstance extends Data.TaggedClass('TagInstance') {
        constructor() {
            super(...arguments);
            this.setSpecifier = setSpecifier;
        }
        getSemverSpecifier() {
            return Option.none();
        }
    }
    Instance.TagInstance = TagInstance;
    /** An `Instance` whose specifier is "workspace:*" */
    class WorkspaceProtocolInstance extends Data.TaggedClass('WorkspaceProtocolInstance') {
        constructor() {
            super(...arguments);
            this.setSpecifier = setSpecifier;
        }
        getSemverSpecifier() {
            return Option.none();
        }
    }
    Instance.WorkspaceProtocolInstance = WorkspaceProtocolInstance;
    /** An `Instance` whose specifier is not supported by npm */
    class UnsupportedInstance extends Data.TaggedClass('UnsupportedInstance') {
        constructor() {
            super(...arguments);
            this.setSpecifier = setSpecifier;
        }
        getSemverSpecifier() {
            return Option.none();
        }
    }
    Instance.UnsupportedInstance = UnsupportedInstance;
})(Instance || (exports.Instance = Instance = {}));
/**
 * In the case of banned dependencies, their version is set to `undefined`,
 * which causes them to be removed by `JSON.stringify`.
 */
function setSpecifier(version) {
    const file = this.packageJsonFile;
    (0, Function_1.pipe)(this.strategy.write(file, [this.name, version]), _R_1.$R.tapErrVerbose);
}
