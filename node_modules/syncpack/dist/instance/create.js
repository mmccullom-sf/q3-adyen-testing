"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInstance = void 0;
const npm_package_arg_1 = __importDefault(require("npm-package-arg"));
const _1 = require(".");
function createInstance(strategy, name, packageJsonFile, specifier) {
    const pkgName = packageJsonFile.contents.name || 'PACKAGE_JSON_HAS_NO_NAME';
    try {
        const parsedSpecifier = parseSpecifier(name, specifier, packageJsonFile);
        switch (parsedSpecifier.type) {
            case 'file':
            case 'directory': {
                return new _1.Instance.FileInstance({
                    name,
                    packageJsonFile,
                    parsedSpecifier,
                    pkgName,
                    specifier,
                    strategy,
                });
            }
            case 'remote': {
                return new _1.Instance.UrlInstance({
                    name,
                    packageJsonFile,
                    parsedSpecifier,
                    pkgName,
                    specifier,
                    strategy,
                });
            }
            case 'git': {
                return 'hosted' in parsedSpecifier
                    ? new _1.Instance.HostedGitInstance({
                        name,
                        packageJsonFile,
                        parsedSpecifier: parsedSpecifier,
                        pkgName,
                        specifier,
                        strategy,
                    })
                    : new _1.Instance.UrlInstance({
                        name,
                        packageJsonFile,
                        parsedSpecifier,
                        pkgName,
                        specifier,
                        strategy,
                    });
            }
            case 'alias': {
                return new _1.Instance.AliasInstance({
                    name,
                    packageJsonFile,
                    parsedSpecifier,
                    pkgName,
                    specifier,
                    strategy,
                });
            }
            case 'version': {
                return new _1.Instance.VersionInstance({
                    name,
                    packageJsonFile,
                    parsedSpecifier: parsedSpecifier,
                    pkgName,
                    specifier,
                    strategy,
                });
            }
            case 'range': {
                return new _1.Instance.RangeInstance({
                    name,
                    packageJsonFile,
                    parsedSpecifier: parsedSpecifier,
                    pkgName,
                    specifier,
                    strategy,
                });
            }
            case 'tag': {
                return new _1.Instance.TagInstance({
                    name,
                    packageJsonFile,
                    parsedSpecifier: parsedSpecifier,
                    pkgName,
                    specifier,
                    strategy,
                });
            }
            case 'workspaceProtocol': {
                return new _1.Instance.WorkspaceProtocolInstance({
                    name,
                    packageJsonFile,
                    parsedSpecifier: parsedSpecifier,
                    pkgName,
                    specifier,
                    strategy,
                });
            }
            default: {
                return new _1.Instance.UnsupportedInstance({
                    name,
                    packageJsonFile,
                    parsedSpecifier,
                    pkgName,
                    specifier,
                    strategy,
                });
            }
        }
    }
    catch (err) {
        return new _1.Instance.UnsupportedInstance({
            name,
            packageJsonFile,
            parsedSpecifier: err,
            pkgName,
            specifier,
            strategy,
        });
    }
}
exports.createInstance = createInstance;
function parseSpecifier(name, specifier, packageJsonFile) {
    if (specifier.startsWith('workspace:')) {
        const parsed = npm_package_arg_1.default.resolve(name, specifier.replace('workspace:', 'file:'), packageJsonFile.dirPath);
        return {
            type: 'workspaceProtocol',
            raw: parsed.raw.replace('file:', 'workspace:'),
            name: parsed.name,
            escapedName: parsed.escapedName,
            scope: parsed.scope,
            rawSpec: parsed.rawSpec.replace('file:', 'workspace:'),
            saveSpec: parsed.saveSpec.replace('file:', 'workspace:'),
        };
    }
    return npm_package_arg_1.default.resolve(name, specifier, packageJsonFile.dirPath);
}
