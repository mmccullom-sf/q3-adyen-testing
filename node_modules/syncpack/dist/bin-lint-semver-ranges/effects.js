"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lintSemverRangesEffects = void 0;
const Function_1 = require("@effect/data/Function");
const Effect = __importStar(require("@effect/io/Effect"));
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("../constants");
const log_group_header_1 = require("../lib/log-group-header");
exports.lintSemverRangesEffects = {
    onFilteredOut() {
        return Effect.unit;
    },
    onIgnored() {
        return Effect.unit;
    },
    onValid() {
        return Effect.unit;
    },
    onSemverRangeMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logRangeMismatch));
    },
    onNonSemverVersion(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logNonSemverVersion));
    },
    onLocalPackageSemverRangeMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logRangeMismatch));
    },
    onComplete() {
        return Effect.unit;
    },
};
function logHeader(input) {
    if (input.index === 0) {
        log_group_header_1.logGroupHeader.semverGroup(input.group, input.index);
    }
    return input;
}
function logRangeMismatch({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{red %s} %s {red %s} %s {green %s} {dim in %s of %s}`, constants_1.ICON.cross, report.name, report.instance.specifier, constants_1.ICON.rightArrow, report.expectedVersion, report.instance.strategy.path, report.instance.packageJsonFile.shortPath);
}
function logNonSemverVersion({ report }) {
    console.log((0, chalk_1.default) `{yellow %s} %s {yellow %s} {dim ignored as a format which syncpack cannot apply semver ranges to}`, constants_1.ICON.panic, report.name, report.instance.specifier);
}
