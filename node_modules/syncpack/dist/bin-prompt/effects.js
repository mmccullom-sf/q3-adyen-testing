"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptEffects = void 0;
const Function_1 = require("@effect/data/Function");
const Effect = __importStar(require("@effect/io/Effect"));
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("../constants");
const tags_1 = require("../env/tags");
const get_unique_specifiers_1 = require("../get-version-groups/lib/get-unique-specifiers");
const log_group_header_1 = require("../lib/log-group-header");
exports.promptEffects = {
    onFilteredOut() {
        return Effect.unit;
    },
    onIgnored() {
        return Effect.unit;
    },
    onValid() {
        return Effect.unit;
    },
    onBanned() {
        return Effect.unit;
    },
    onHighestSemverMismatch() {
        return Effect.unit;
    },
    onLowestSemverMismatch() {
        return Effect.unit;
    },
    onPinnedMismatch() {
        return Effect.unit;
    },
    onSameRangeMismatch(input) {
        return (0, Function_1.pipe)(Effect.sync(() => logHeader(input)), Effect.flatMap(askForNextVersion));
    },
    onSnappedToMismatch() {
        return Effect.unit;
    },
    onNonSemverMismatch(input) {
        return (0, Function_1.pipe)(Effect.sync(() => logHeader(input)), Effect.flatMap(askForNextVersion));
    },
    onLocalPackageMismatch() {
        return Effect.unit;
    },
    onComplete() {
        return Effect.unit;
    },
};
function logHeader(input) {
    if (input.index === 0) {
        log_group_header_1.logGroupHeader.versionGroup(input.group, input.index);
    }
    return input;
}
function askForNextVersion({ report }) {
    return (0, Function_1.pipe)(Effect.gen(function* ($) {
        const OTHER = chalk_1.default.dim('Other');
        const SKIP = chalk_1.default.dim('Skip this dependency');
        const env = yield* $(tags_1.EnvTag);
        const choice = yield* $(env.askForChoice({
            message: (0, chalk_1.default) `${report.name} {dim Choose a version to replace the others}`,
            choices: [...(0, get_unique_specifiers_1.getUniqueSpecifiers)(report.instances).map((i) => i.specifier), OTHER, SKIP],
        }));
        if (choice === SKIP)
            return;
        const nextVersion = choice === OTHER
            ? yield* $(env.askForInput({
                message: (0, chalk_1.default) `${report.name} {dim Enter a new version to replace the others}`,
            }))
            : choice;
        yield* $(Effect.sync(() => {
            report.instances.forEach((instance) => {
                instance.setSpecifier(nextVersion);
            });
        }));
    }), Effect.catchTags({
        AskForChoiceError: (err) => Effect.sync(() => {
            console.error(chalk_1.default.red(constants_1.ICON.panic, 'AskForChoiceError:', err));
        }),
        AskForInputError: (err) => Effect.sync(() => {
            console.error(chalk_1.default.red(constants_1.ICON.panic, 'AskForInputError:', err));
        }),
    }));
}
