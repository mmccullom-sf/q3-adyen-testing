"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listEffects = void 0;
const Function_1 = require("@effect/data/Function");
const Effect = __importStar(require("@effect/io/Effect"));
const chalk_1 = __importDefault(require("chalk"));
const uniq_1 = require("tightrope/array/uniq");
const constants_1 = require("../constants");
const get_unique_specifiers_1 = require("../get-version-groups/lib/get-unique-specifiers");
const log_group_header_1 = require("../lib/log-group-header");
exports.listEffects = {
    onFilteredOut() {
        return Effect.unit;
    },
    onIgnored(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logIgnored));
    },
    onValid(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logValid));
    },
    onBanned(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logBanned));
    },
    onHighestSemverMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logFixableMismatch));
    },
    onLowestSemverMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logFixableMismatch));
    },
    onPinnedMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logFixableMismatch));
    },
    onSameRangeMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logUnfixableMismatch));
    },
    onSnappedToMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logFixableMismatch));
    },
    onNonSemverMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logUnfixableMismatch));
    },
    onLocalPackageMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logFixableMismatch));
    },
    onComplete() {
        return Effect.unit;
    },
};
function logHeader(input) {
    if (input.index === 0) {
        log_group_header_1.logGroupHeader.versionGroup(input.group, input.index);
    }
    return input;
}
function logFixableMismatch({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{red %s %s} %s`, constants_1.ICON.cross, report.name, listColouredSpecifiers(report.expectedVersion, report.instances));
}
function logUnfixableMismatch({ report, ctx, }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{red %s %s} %s`, constants_1.ICON.cross, report.name, (0, get_unique_specifiers_1.getUniqueSpecifiers)(report.instances)
        .map((instance) => instance.getSemverSpecifier() !== null
        ? chalk_1.default.red(instance.specifier)
        : chalk_1.default.yellow(instance.specifier))
        .join(chalk_1.default.dim(', ')));
}
function logBanned({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{red %s %s} {dim.red is banned in this version group}`, constants_1.ICON.cross, report.name);
}
function logIgnored({ report }) {
    console.log((0, chalk_1.default) `{dim -} {dim %s} {white is ignored in this version group}`, report.name);
}
function logValid({ report }) {
    var _a, _b;
    console.log((0, chalk_1.default) `{dim -} {white %s} {dim %s}`, report.name, (_b = (_a = report.instances) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.specifier);
}
function listColouredSpecifiers(pinVersion, instances) {
    return getAllSpecifiers(pinVersion, instances)
        .map((version) => withColour(pinVersion, version))
        .join(chalk_1.default.dim(', '));
}
function withColour(pinVersion, version) {
    return version === pinVersion ? chalk_1.default.green(version) : chalk_1.default.red(version);
}
function getAllSpecifiers(pinVersion, instances) {
    return (0, uniq_1.uniq)([pinVersion].concat(instances.map((i) => i.specifier)));
}
