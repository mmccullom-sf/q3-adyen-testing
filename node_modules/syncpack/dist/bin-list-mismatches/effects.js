"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listMismatchesEffects = void 0;
const Function_1 = require("@effect/data/Function");
const Effect = __importStar(require("@effect/io/Effect"));
const chalk_1 = __importDefault(require("chalk"));
const os_1 = require("os");
const constants_1 = require("../constants");
const log_group_header_1 = require("../lib/log-group-header");
exports.listMismatchesEffects = {
    onFilteredOut() {
        return Effect.unit;
    },
    onIgnored() {
        return Effect.unit;
    },
    onValid() {
        return Effect.unit;
    },
    onBanned(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logBanned));
    },
    onHighestSemverMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logHighLowSemverMismatch));
    },
    onLowestSemverMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logHighLowSemverMismatch));
    },
    onPinnedMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logPinnedMismatch));
    },
    onSameRangeMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logSameRangeMismatch));
    },
    onSnappedToMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logSnappedToMismatch));
    },
    onNonSemverMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logNonSemverMismatch));
    },
    onLocalPackageMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logLocalPackageMismatch));
    },
    onComplete() {
        return Effect.unit;
    },
};
function logHeader(input) {
    if (input.index === 0) {
        log_group_header_1.logGroupHeader.versionGroup(input.group, input.index);
    }
    return input;
}
function logBanned({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `  {red %s} %s {dim is banned in this version group}`, constants_1.ICON.cross, report.name);
    report.instances.forEach((instance) => {
        console.log((0, chalk_1.default) `  {red %s} {dim in %s of %s}`, instance.specifier, instance.strategy.path, instance.packageJsonFile.shortPath);
    });
}
function logHighLowSemverMismatch({ report, ctx, }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{red %s} %s {green %s} {dim is the %s valid semver version in use}`, constants_1.ICON.cross, report.name, report.expectedVersion, report._tag === 'LowestSemverMismatch' ? 'lowest' : 'highest');
    report.instances.forEach((instance) => {
        if (instance.specifier !== report.expectedVersion) {
            console.log((0, chalk_1.default) `  {red %s} {dim in %s of %s}`, instance.specifier, instance.strategy.path, instance.packageJsonFile.shortPath);
        }
    });
}
function logPinnedMismatch({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{red %s} %s {dim is pinned in this version group at} {green %s}`, constants_1.ICON.cross, report.name, report.expectedVersion);
    report.instances.forEach((instance) => {
        if (instance.specifier !== report.expectedVersion) {
            console.log((0, chalk_1.default) `  {red %s} {dim in %s of %s}`, instance.specifier, instance.strategy.path, instance.packageJsonFile.shortPath);
        }
    });
}
function logSnappedToMismatch({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{red %s} %s {dim should snap to {reset.green %s}, used by %s}`, constants_1.ICON.cross, report.name, report.expectedVersion, report.snapTo.join(' || '));
    report.instances.forEach((instance) => {
        if (instance.specifier !== report.expectedVersion) {
            console.log((0, chalk_1.default) `  {red %s} {dim in %s of %s}`, instance.specifier, instance.strategy.path, instance.packageJsonFile.shortPath);
        }
    });
}
function logSameRangeMismatch({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{yellow %s %s} {dim has mismatched versions under the "sameRange" policy which syncpack cannot auto fix}%s`, constants_1.ICON.panic, report.name, (0, chalk_1.default) `${os_1.EOL}  use {blue syncpack prompt} to fix manually`);
    report.instances.forEach((instance) => {
        console.log((0, chalk_1.default) `  {yellow %s} {dim in %s of %s}`, instance.specifier, instance.strategy.path, instance.packageJsonFile.shortPath);
    });
}
function logNonSemverMismatch({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{yellow %s %s} {dim has mismatched unsupported versions which syncpack cannot auto fix}%s`, constants_1.ICON.panic, report.name, (0, chalk_1.default) `${os_1.EOL}  use {blue syncpack prompt} to fix manually`);
    report.instances.forEach((instance) => {
        console.log((0, chalk_1.default) `  {yellow %s} {dim in %s of %s}`, instance.specifier, instance.strategy.path, instance.packageJsonFile.shortPath);
    });
}
function logLocalPackageMismatch({ report, ctx }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{red %s} %s {green %s} {dim is developed in this repo at %s}`, constants_1.ICON.cross, report.name, report.expectedVersion, report.localPackageInstance.packageJsonFile.shortPath);
    report.instances.forEach((instance) => {
        if (instance.specifier !== report.expectedVersion) {
            console.log((0, chalk_1.default) `  {red %s} {dim in %s of %s}`, instance.specifier, instance.strategy.path, instance.packageJsonFile.shortPath);
        }
    });
}
