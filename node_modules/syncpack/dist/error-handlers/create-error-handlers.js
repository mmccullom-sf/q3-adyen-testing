"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createErrorHandlers = void 0;
const Effect = __importStar(require("@effect/io/Effect"));
const createErrorHandlers = (errorHandlers) => ({
    DeprecatedTypesError(err) {
        return Effect.sync(() => errorHandlers.DeprecatedTypesError(err));
    },
    GlobError(err) {
        return Effect.sync(() => errorHandlers.GlobError(err));
    },
    JsonParseError(err) {
        return Effect.sync(() => errorHandlers.JsonParseError(err));
    },
    NoSourcesFoundError(err) {
        return Effect.sync(() => errorHandlers.NoSourcesFoundError(err));
    },
    ReadConfigFileError(err) {
        return Effect.sync(() => errorHandlers.ReadConfigFileError(err));
    },
    ReadFileError(err) {
        return Effect.sync(() => errorHandlers.ReadFileError(err));
    },
    SemverGroupConfigError(err) {
        return Effect.sync(() => errorHandlers.SemverGroupConfigError(err));
    },
    VersionGroupConfigError(err) {
        return Effect.sync(() => errorHandlers.VersionGroupConfigError(err));
    },
    WriteFileError(err) {
        return Effect.sync(() => errorHandlers.WriteFileError(err));
    },
});
exports.createErrorHandlers = createErrorHandlers;
