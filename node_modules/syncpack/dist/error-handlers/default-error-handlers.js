"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultErrorHandlers = void 0;
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("../constants");
exports.defaultErrorHandlers = {
    DeprecatedTypesError(err) {
        const url = 'https://github.com/JamieMason/syncpack/releases/tag/9.0.0';
        console.log(chalk_1.default.red(constants_1.ICON.panic, `Your syncpack config file contains values deprecated in ${url}`));
        console.log(chalk_1.default.red('  Dependency Types:', err.types));
        console.log(chalk_1.default.red('  Docs: https://jamiemason.github.io/syncpack/config/dependency-types'));
    },
    GlobError(err) {
        console.log(chalk_1.default.red(constants_1.ICON.panic, 'An error was found when processing your source globs'));
        console.log(chalk_1.default.red('  Error:', err.error));
    },
    JsonParseError(err) {
        console.log(chalk_1.default.red(constants_1.ICON.panic, 'An error was found when parsing a JSON file'));
        console.log(chalk_1.default.red('  File:', err.filePath));
        console.log(chalk_1.default.red('  Error:', err.error));
    },
    NoSourcesFoundError(err) {
        console.log(chalk_1.default.red(constants_1.ICON.panic, 'No package.json files were found'));
        console.log(chalk_1.default.red('  CWD:'), err.CWD);
        console.log(chalk_1.default.red('  Sources:', err.patterns));
    },
    ReadConfigFileError(err) {
        console.log(chalk_1.default.red(constants_1.ICON.panic, 'Your syncpack config file contains an error'));
        console.log(chalk_1.default.red('  File:', err.filePath || 'not known (discovered by cosmiconfig)'));
        console.log(chalk_1.default.red('  Error:', err.error));
    },
    ReadFileError(err) {
        console.log(chalk_1.default.red(constants_1.ICON.panic, 'An error was found when reading a file'));
        console.log(chalk_1.default.red('  File:', err.filePath));
        console.log(chalk_1.default.red('  Error:', err.error));
    },
    SemverGroupConfigError(err) {
        console.log(chalk_1.default.red(constants_1.ICON.panic, 'Your semver group config contains an error'));
        console.log(chalk_1.default.red('  Error:', err.error));
        console.log(chalk_1.default.red('  Config:'), err.config);
        console.log(chalk_1.default.red('  Docs: https://jamiemason.github.io/syncpack/config/semver-groups'));
    },
    VersionGroupConfigError(err) {
        console.log(chalk_1.default.red(constants_1.ICON.panic, 'Your version group config contains an error'));
        console.log(chalk_1.default.red('  Error:', err.error));
        console.log(chalk_1.default.red('  Config:'), err.config);
        console.log(chalk_1.default.red('  Docs: https://jamiemason.github.io/syncpack/config/version-groups'));
    },
    WriteFileError(err) {
        console.log(chalk_1.default.red(constants_1.ICON.panic, 'An error was found when writing to a file'));
        console.log(chalk_1.default.red('  File:', err.filePath));
        console.log(chalk_1.default.red('  Error:', err.error));
    },
};
