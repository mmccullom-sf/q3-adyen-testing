import * as Data from '@effect/data/Data';
import * as Effect from '@effect/io/Effect';
import { SemverGroupReport } from '.';
import type { SemverGroupConfig } from '../config/types';
import type { Instance } from '../instance';
declare const IgnoredSemverGroup_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "Ignored";
}>;
export declare class IgnoredSemverGroup extends IgnoredSemverGroup_base<{
    config: SemverGroupConfig.Ignored;
    instances: Instance.Any[];
}> {
    constructor(config: SemverGroupConfig.Ignored);
    canAdd(_: Instance.Any): boolean;
    inspect(): Effect.Effect<never, never, SemverGroupReport.Ignored>[];
}
export {};
