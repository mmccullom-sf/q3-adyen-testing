"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSemverGroups = exports.SemverGroupConfigError = exports.SemverGroupReport = void 0;
const Data = __importStar(require("@effect/data/Data"));
const Function_1 = require("@effect/data/Function");
const Effect = __importStar(require("@effect/io/Effect"));
const is_array_of_strings_1 = require("tightrope/guard/is-array-of-strings");
const is_non_empty_array_1 = require("tightrope/guard/is-non-empty-array");
const is_non_empty_string_1 = require("tightrope/guard/is-non-empty-string");
const is_object_1 = require("tightrope/guard/is-object");
const get_enabled_types_1 = require("../config/get-enabled-types");
const get_semver_range_1 = require("../config/get-semver-range");
const can_add_to_group_1 = require("../guards/can-add-to-group");
const is_valid_semver_range_1 = require("../guards/is-valid-semver-range");
const sort_by_name_1 = require("../lib/sort-by-name");
const filtered_out_1 = require("./filtered-out");
const ignored_1 = require("./ignored");
const with_range_1 = require("./with-range");
var SemverGroupReport;
(function (SemverGroupReport) {
    class FilteredOut extends Data.TaggedClass('FilteredOut') {
    }
    SemverGroupReport.FilteredOut = FilteredOut;
    class Ignored extends Data.TaggedClass('Ignored') {
    }
    SemverGroupReport.Ignored = Ignored;
    class Valid extends Data.TaggedClass('Valid') {
    }
    SemverGroupReport.Valid = Valid;
    class LocalPackageSemverRangeMismatch extends Data.TaggedClass('LocalPackageSemverRangeMismatch') {
    }
    SemverGroupReport.LocalPackageSemverRangeMismatch = LocalPackageSemverRangeMismatch;
    class SemverRangeMismatch extends Data.TaggedClass('SemverRangeMismatch') {
    }
    SemverGroupReport.SemverRangeMismatch = SemverRangeMismatch;
    class NonSemverVersion extends Data.TaggedClass('NonSemverVersion') {
    }
    SemverGroupReport.NonSemverVersion = NonSemverVersion;
})(SemverGroupReport || (exports.SemverGroupReport = SemverGroupReport = {}));
class SemverGroupConfigError extends Data.TaggedClass('SemverGroupConfigError') {
}
exports.SemverGroupConfigError = SemverGroupConfigError;
function getSemverGroups(ctx) {
    return (0, Function_1.pipe)(Effect.Do, Effect.bind('enabledTypes', () => (0, get_enabled_types_1.getEnabledTypes)(ctx.config)), Effect.bind('semverGroups', () => createSemverGroups(ctx)), Effect.flatMap(({ enabledTypes, semverGroups }) => {
        for (const file of ctx.packageJsonFiles) {
            instances: for (const instance of file.getInstances(enabledTypes)) {
                for (const group of semverGroups) {
                    if ((0, can_add_to_group_1.canAddToGroup)(group, instance)) {
                        group.instances.push(instance);
                        continue instances;
                    }
                }
            }
        }
        return Effect.succeed(semverGroups.filter((group) => (0, is_non_empty_array_1.isNonEmptyArray)(group.instances.sort(sort_by_name_1.sortByName))));
    }));
}
exports.getSemverGroups = getSemverGroups;
function createSemverGroups(ctx) {
    const { cli, rcFile } = ctx.config;
    const semverGroups = [
        Effect.succeed(new filtered_out_1.FilteredOutSemverGroup(ctx)),
    ];
    if ((0, is_non_empty_array_1.isNonEmptyArray)(rcFile.semverGroups)) {
        rcFile.semverGroups.forEach((config) => {
            if (!(0, is_object_1.isObject)(config)) {
                return semverGroups.push(Effect.fail(new SemverGroupConfigError({
                    config,
                    error: 'config is not an object',
                })));
            }
            if (!(0, is_array_of_strings_1.isArrayOfStrings)(config.dependencies)) {
                return semverGroups.push(Effect.fail(new SemverGroupConfigError({
                    config,
                    error: 'config.dependencies is not an array of strings',
                })));
            }
            if (!(0, is_array_of_strings_1.isArrayOfStrings)(config.packages)) {
                return semverGroups.push(Effect.fail(new SemverGroupConfigError({
                    config,
                    error: 'config.packages is not an array of strings',
                })));
            }
            const { dependencies, packages } = config;
            const label = (0, is_non_empty_string_1.isNonEmptyString)(config.label) ? config.label : '';
            const dependencyTypes = (0, is_array_of_strings_1.isArrayOfStrings)(config.dependencyTypes)
                ? config.dependencyTypes
                : [];
            if (config.isIgnored === true) {
                semverGroups.push(Effect.succeed(new ignored_1.IgnoredSemverGroup({
                    dependencies,
                    dependencyTypes,
                    isIgnored: true,
                    label,
                    packages,
                })));
            }
            else if ((0, is_valid_semver_range_1.isValidSemverRange)(config.range)) {
                semverGroups.push(Effect.succeed(new with_range_1.WithRangeSemverGroup(false, {
                    dependencies,
                    dependencyTypes,
                    label,
                    packages,
                    range: config.range,
                })));
            }
        });
    }
    semverGroups.push(Effect.succeed(new with_range_1.WithRangeSemverGroup(true, {
        dependencies: ['**'],
        label: '',
        packages: ['**'],
        range: (0, get_semver_range_1.getSemverRange)({ cli, rcFile }),
    })));
    return Effect.all(semverGroups);
}
