"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithRangeSemverGroup = void 0;
const Data = __importStar(require("@effect/data/Data"));
const Option = __importStar(require("@effect/data/Option"));
const Effect = __importStar(require("@effect/io/Effect"));
const _1 = require(".");
const set_semver_range_1 = require("../lib/set-semver-range");
class WithRangeSemverGroup extends Data.TaggedClass('WithRange') {
    constructor(isCatchAll, config) {
        super({
            config,
            instances: [],
            isCatchAll,
        });
    }
    canAdd(_) {
        return true;
    }
    inspect() {
        return this.instances.map((instance) => {
            if (Option.isNone(instance.getSemverSpecifier())) {
                return Effect.fail(new _1.SemverGroupReport.NonSemverVersion({
                    name: instance.name,
                    instance,
                    isValid: false,
                }));
            }
            const isLocalPackageInstance = instance.strategy.name === 'localPackage';
            const exactVersion = (0, set_semver_range_1.setSemverRange)('', instance.specifier);
            const expectedVersion = (0, set_semver_range_1.setSemverRange)(this.config.range, instance.specifier);
            if (isLocalPackageInstance && instance.specifier !== exactVersion) {
                return Effect.fail(new _1.SemverGroupReport.LocalPackageSemverRangeMismatch({
                    name: instance.name,
                    instance,
                    isValid: false,
                    expectedVersion: exactVersion,
                }));
            }
            if (instance.specifier === expectedVersion) {
                return Effect.succeed(new _1.SemverGroupReport.Valid({
                    name: instance.name,
                    instance,
                    isValid: true,
                }));
            }
            return Effect.fail(new _1.SemverGroupReport.SemverRangeMismatch({
                name: instance.name,
                instance,
                isValid: false,
                expectedVersion,
            }));
        });
    }
}
exports.WithRangeSemverGroup = WithRangeSemverGroup;
