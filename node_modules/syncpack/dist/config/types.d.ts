import * as Context from '@effect/data/Context';
import type { Union } from 'ts-toolbelt';
/**
 * Aliases for semver range formats supported by syncpack
 *
 * Defaults to `""` to ensure that exact dependency versions are used
 * instead of loose ranges, but this can be overridden in your config file
 * or via the `--semver-range` command line option.
 *
 * | Supported Range |   Example |
 * | --------------- | --------: |
 * | `"<"`           |  `<1.4.2` |
 * | `"<="`          | `<=1.4.2` |
 * | `""`            |   `1.4.2` |
 * | `"~"`           |  `~1.4.2` |
 * | `"^"`           |  `^1.4.2` |
 * | `">="`          | `>=1.4.2` |
 * | `">"`           |  `>1.4.2` |
 * | `"*"`           |       `*` |
 *
 * @default ""
 */
export type SemverRange = '' | '*' | '>' | '>=' | '.x' | '<' | '<=' | '^' | '~';
export interface GroupConfig {
    dependencies: string[];
    dependencyTypes?: string[];
    label?: string;
    packages: string[];
}
export declare namespace SemverGroupConfig {
    interface Ignored extends GroupConfig {
        isIgnored: true;
    }
    interface WithRange extends GroupConfig {
        range: SemverRange;
    }
    type Any = Union.Strict<Ignored | WithRange>;
}
export declare namespace VersionGroupConfig {
    interface Banned extends GroupConfig {
        isBanned: true;
    }
    interface Ignored extends GroupConfig {
        isIgnored: true;
    }
    interface Pinned extends GroupConfig {
        pinVersion: string;
    }
    interface SnappedTo extends GroupConfig {
        snapTo: string[];
    }
    interface SameRange extends GroupConfig {
        policy: 'sameRange';
    }
    interface SnappedTo extends GroupConfig {
        snapTo: string[];
    }
    interface Standard extends GroupConfig {
        preferVersion?: 'highestSemver' | 'lowestSemver';
    }
    type Any = Union.Strict<Banned | Ignored | Pinned | SameRange | SnappedTo | Standard>;
}
declare namespace CustomTypeConfig {
    interface NameAndVersionProps {
        namePath: string;
        path: string;
        strategy: 'name~version';
    }
    interface NamedVersionString {
        path: string;
        strategy: 'name@version';
    }
    interface UnnamedVersionString {
        path: string;
        strategy: 'version';
    }
    interface VersionsByName {
        path: string;
        strategy: 'versionsByName';
    }
    type Any = Union.Strict<NameAndVersionProps | NamedVersionString | UnnamedVersionString | VersionsByName>;
}
export interface CliConfig {
    readonly configPath?: string;
    readonly filter: string;
    readonly indent: string;
    readonly semverRange: SemverRange;
    readonly source: string[];
    readonly types: string;
}
export declare const CliConfigTag: Context.Tag<Partial<CliConfig>, Partial<CliConfig>>;
export interface RcConfig {
    /** @see https://jamiemason.github.io/syncpack/config/custom-types */
    customTypes: Record<string, CustomTypeConfig.Any>;
    /** @see https://jamiemason.github.io/syncpack/config/dependency-types */
    dependencyTypes: string[];
    /** @see https://jamiemason.github.io/syncpack/config/filter */
    filter: string;
    /** @see https://jamiemason.github.io/syncpack/config/indent */
    indent: string;
    /** @see https://jamiemason.github.io/syncpack/config/semver-groups */
    semverGroups: SemverGroupConfig.Any[];
    /** @see https://jamiemason.github.io/syncpack/config/semver-range */
    semverRange: SemverRange;
    /** @see https://jamiemason.github.io/syncpack/config/sort-az */
    sortAz: string[];
    /** @see https://jamiemason.github.io/syncpack/config/sort-first */
    sortFirst: string[];
    /** @see https://jamiemason.github.io/syncpack/config/source */
    source: string[];
    /** @see https://jamiemason.github.io/syncpack/config/version-groups */
    versionGroups: VersionGroupConfig.Any[];
}
export {};
