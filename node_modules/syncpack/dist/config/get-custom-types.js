"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomTypes = void 0;
const is_non_empty_object_1 = require("tightrope/guard/is-non-empty-object");
const is_non_empty_string_1 = require("tightrope/guard/is-non-empty-string");
const is_object_1 = require("tightrope/guard/is-object");
const name_and_version_props_1 = require("../strategy/name-and-version-props");
const named_version_string_1 = require("../strategy/named-version-string");
const unnamed_version_string_1 = require("../strategy/unnamed-version-string");
const versions_by_name_1 = require("../strategy/versions-by-name");
function getCustomTypes({ rcFile }) {
    if (!(0, is_non_empty_object_1.isNonEmptyObject)(rcFile.customTypes))
        return [];
    const ERR_OBJ = new Error('Invalid customType');
    const ERR_NAME = new Error('Invalid customType name');
    const ERR_PATH = new Error('Invalid customType.path');
    const ERR_NAME_PATH = new Error('Invalid customType namePath');
    const ERR_STRATEGY = new Error('Invalid customType.strategy');
    return Object.entries(rcFile.customTypes).map(([name, config]) => {
        if (!(0, is_object_1.isObject)(config))
            throw ERR_OBJ;
        if (!(0, is_non_empty_string_1.isNonEmptyString)(name))
            throw ERR_NAME;
        if (!(0, is_non_empty_string_1.isNonEmptyString)(config.path))
            throw ERR_PATH;
        const path = config.path;
        const strategy = config.strategy;
        switch (strategy) {
            case 'name~version': {
                const namePath = config.namePath;
                if (!(0, is_non_empty_string_1.isNonEmptyString)(namePath))
                    throw ERR_NAME_PATH;
                return new name_and_version_props_1.NameAndVersionPropsStrategy(name, path, namePath);
            }
            case 'name@version': {
                return new named_version_string_1.NamedVersionStringStrategy(name, path);
            }
            case 'version': {
                return new unnamed_version_string_1.UnnamedVersionStringStrategy(name, path);
            }
            case 'versionsByName': {
                return new versions_by_name_1.VersionsByNameStrategy(name, path);
            }
            default:
                throw ERR_STRATEGY;
        }
    });
}
exports.getCustomTypes = getCustomTypes;
