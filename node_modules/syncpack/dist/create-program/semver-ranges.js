"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSemverRangesProgram = void 0;
const Function_1 = require("@effect/data/Function");
const Unify_1 = require("@effect/data/Unify");
const Effect = __importStar(require("@effect/io/Effect"));
const Match = __importStar(require("@effect/match"));
const get_semver_groups_1 = require("../get-semver-groups");
function createSemverRangesProgram(ctx, effects) {
    return (0, Function_1.pipe)((0, get_semver_groups_1.getSemverGroups)(ctx), Effect.flatMap((semverGroups) => Effect.all(semverGroups.flatMap((group) => group.inspect().map((reportEffect, index) => (0, Function_1.pipe)((0, Unify_1.unify)(reportEffect), Effect.flatMap((0, Function_1.pipe)(Match.type(), Match.tagsExhaustive({
        FilteredOut(report) {
            return effects.onFilteredOut({ ctx, group, index, report });
        },
        Ignored(report) {
            return effects.onIgnored({ ctx, group, index, report });
        },
        Valid(report) {
            return effects.onValid({ ctx, group, index, report });
        },
    }))), Effect.catchTags({
        SemverRangeMismatch(report) {
            return effects.onSemverRangeMismatch({ ctx, group, index, report });
        },
        NonSemverVersion(report) {
            return effects.onNonSemverVersion({ ctx, group, index, report });
        },
        LocalPackageSemverRangeMismatch(report) {
            return effects.onLocalPackageSemverRangeMismatch({ ctx, group, index, report });
        },
    })))), { concurrency: 'inherit' })), Effect.flatMap((results) => effects.onComplete(ctx, results)), Effect.map(() => ctx));
}
exports.createSemverRangesProgram = createSemverRangesProgram;
