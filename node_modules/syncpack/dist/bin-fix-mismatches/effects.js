"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixMismatchesEffects = void 0;
const Function_1 = require("@effect/data/Function");
const Effect = __importStar(require("@effect/io/Effect"));
const chalk_1 = __importDefault(require("chalk"));
const os_1 = require("os");
const is_object_1 = require("tightrope/guard/is-object");
const is_undefined_1 = require("tightrope/guard/is-undefined");
const constants_1 = require("../constants");
const delete_1 = require("../get-version-groups/lib/delete");
const log_group_header_1 = require("../lib/log-group-header");
exports.fixMismatchesEffects = {
    onFilteredOut() {
        return Effect.unit;
    },
    onIgnored() {
        return Effect.unit;
    },
    onValid() {
        return Effect.unit;
    },
    onBanned(input) {
        return Effect.sync(() => removeVersions(input));
    },
    onHighestSemverMismatch(input) {
        return Effect.sync(() => setVersions(input));
    },
    onLowestSemverMismatch(input) {
        return Effect.sync(() => setVersions(input));
    },
    onPinnedMismatch(input) {
        return Effect.sync(() => setVersions(input));
    },
    onSameRangeMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logSameRangeMismatch));
    },
    onSnappedToMismatch(input) {
        return Effect.sync(() => setVersions(input));
    },
    onNonSemverMismatch(input) {
        return Effect.sync(() => (0, Function_1.pipe)(input, logHeader, logNonSemverMismatch));
    },
    onLocalPackageMismatch(input) {
        return Effect.sync(() => setVersions(input));
    },
    onComplete(ctx) {
        return Effect.sync(() => deleteEmptyObjects(ctx));
    },
};
function logHeader(input) {
    if (input.index === 0) {
        log_group_header_1.logGroupHeader.versionGroup(input.group, input.index);
    }
    return input;
}
function setVersions({ report }) {
    report.instances.forEach((instance) => {
        instance.setSpecifier(report.expectedVersion);
    });
}
function removeVersions({ report }) {
    report.instances.forEach((instance) => {
        instance.setSpecifier(delete_1.DELETE);
    });
}
function logSameRangeMismatch({ ctx, report }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{yellow %s %s} {dim has mismatched versions under the "sameRange" policy which syncpack cannot auto fix}%s`, constants_1.ICON.panic, report.name, (0, chalk_1.default) `${os_1.EOL}  use {blue syncpack prompt} to fix manually`);
}
function logNonSemverMismatch({ ctx, report }) {
    ctx.isInvalid = true;
    console.log((0, chalk_1.default) `{yellow %s %s} {dim has mismatched unsupported versions which syncpack cannot auto fix}%s`, constants_1.ICON.panic, report.name, (0, chalk_1.default) `${os_1.EOL}  use {blue syncpack prompt} to fix manually`);
}
/** Remove empty objects such as `{"dependencies": {}}` left after deleting */
function deleteEmptyObjects(ctx) {
    ctx.packageJsonFiles.forEach((packageJsonFile) => {
        const contents = packageJsonFile.contents;
        Object.keys(contents).forEach((key) => {
            const value = contents[key];
            if ((0, is_object_1.isObject)(value) && Object.values(value).every(is_undefined_1.isUndefined)) {
                delete contents[key];
            }
        });
    });
}
