import * as Context from '@effect/data/Context';
import * as Data from '@effect/data/Data';
import type { Env } from './create-env';
export declare const EnvTag: Context.Tag<Env, Env>;
declare const AskForChoiceError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "AskForChoiceError";
}>;
export declare class AskForChoiceError extends AskForChoiceError_base<{
    readonly error: string;
}> {
}
declare const AskForInputError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "AskForInputError";
}>;
export declare class AskForInputError extends AskForInputError_base<{
    readonly error: string;
}> {
}
declare const GlobError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "GlobError";
}>;
export declare class GlobError extends GlobError_base<{
    readonly error: string;
}> {
}
declare const ReadConfigFileError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "ReadConfigFileError";
}>;
export declare class ReadConfigFileError extends ReadConfigFileError_base<{
    readonly filePath: string;
    readonly error: string;
}> {
}
declare const ReadFileError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "ReadFileError";
}>;
export declare class ReadFileError extends ReadFileError_base<{
    readonly filePath: string;
    readonly error: string;
}> {
}
declare const ReadYamlFileError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "ReadYamlFileError";
}>;
export declare class ReadYamlFileError extends ReadYamlFileError_base<{
    readonly filePath: string;
    readonly error: string;
}> {
}
declare const WriteFileError_base: new <A extends Record<string, any>>(args: Data.IsEqualTo<Omit<A, keyof import("@effect/data/Equal").Equal>, {}> extends true ? void : Omit<A, keyof import("@effect/data/Equal").Equal>) => Data.Data<A & {
    _tag: "WriteFileError";
}>;
export declare class WriteFileError extends WriteFileError_base<{
    readonly filePath: string;
    readonly error: string;
}> {
}
export {};
