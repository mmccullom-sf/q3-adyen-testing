"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEnv = void 0;
const Effect = __importStar(require("@effect/io/Effect"));
const tags_1 = require("./tags");
function createEnv(env) {
    return {
        askForChoice(opts) {
            return Effect.tryPromise({
                try: () => env.askForChoice(opts),
                catch: (err) => new tags_1.AskForChoiceError({ error: String(err) }),
            });
        },
        askForInput(opts) {
            return Effect.tryPromise({
                try: () => env.askForInput(opts),
                catch: (err) => new tags_1.AskForInputError({ error: String(err) }),
            });
        },
        // @FIXME: process.exit is probably handled some other way in effect-ts
        exitProcess(code) {
            return Effect.sync(() => {
                env.exitProcess(code);
            });
        },
        globSync(patterns) {
            return Effect.try({
                try: () => env.globSync(patterns),
                catch: (err) => new tags_1.GlobError({ error: String(err) }),
            });
        },
        readConfigFileSync(filePath) {
            return Effect.try({
                try: () => env.readConfigFileSync(filePath),
                catch: (err) => new tags_1.ReadConfigFileError({ filePath: filePath || '', error: String(err) }),
            });
        },
        readFileSync(filePath) {
            return Effect.try({
                try: () => env.readFileSync(filePath),
                catch: (err) => new tags_1.ReadFileError({ filePath, error: String(err) }),
            });
        },
        readYamlFileSync(filePath) {
            return Effect.try({
                try: () => env.readYamlFileSync(filePath),
                catch: (err) => new tags_1.ReadYamlFileError({ filePath, error: String(err) }),
            });
        },
        writeFileSync(filePath, contents) {
            return Effect.try({
                try: () => env.writeFileSync(filePath, contents),
                catch: (err) => new tags_1.WriteFileError({ filePath, error: String(err) }),
            });
        },
    };
}
exports.createEnv = createEnv;
