import * as Effect from '@effect/io/Effect';
import type { O } from 'ts-toolbelt';
import type { RcConfig } from '../config/types';
import type { DefaultEnv } from './default-env';
import { AskForChoiceError, AskForInputError, GlobError, ReadConfigFileError, ReadFileError, ReadYamlFileError, WriteFileError } from './tags';
export interface Env {
    readonly askForChoice: (opts: {
        message: string;
        choices: string[];
    }) => Effect.Effect<never, AskForChoiceError, string>;
    readonly askForInput: (opts: {
        message: string;
    }) => Effect.Effect<never, AskForInputError, string>;
    readonly exitProcess: (code: number) => Effect.Effect<never, never, void>;
    readonly globSync: (patterns: string[]) => Effect.Effect<never, GlobError, string[]>;
    readonly readConfigFileSync: (configPath?: string) => Effect.Effect<never, ReadConfigFileError, O.Partial<RcConfig, 'deep'>>;
    readonly readFileSync: (filePath: string) => Effect.Effect<never, ReadFileError, string>;
    readonly readYamlFileSync: <T = unknown>(filePath: string) => Effect.Effect<never, ReadYamlFileError, T>;
    readonly writeFileSync: (filePath: string, contents: string) => Effect.Effect<never, WriteFileError, void>;
}
export declare function createEnv(env: DefaultEnv): Env;
