"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultEnv = void 0;
const cosmiconfig_1 = require("cosmiconfig");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore Select *does* exist
const enquirer_1 = require("enquirer");
const fs_extra_1 = require("fs-extra");
const globby = __importStar(require("globby"));
const path_1 = require("path");
const readYamlFile = __importStar(require("read-yaml-file"));
const is_non_empty_object_1 = require("tightrope/guard/is-non-empty-object");
const constants_1 = require("../constants");
const log_verbose_1 = require("../lib/log-verbose");
exports.defaultEnv = {
    /* istanbul ignore next */
    askForChoice({ message, choices }) {
        return new enquirer_1.Select({ name: 'choice', message, choices }).run();
    },
    /* istanbul ignore next */
    askForInput({ message }) {
        return new enquirer_1.Input({ message }).run();
    },
    /* istanbul ignore next */
    globSync(patterns) {
        (0, log_verbose_1.logVerbose)('globSync(', patterns, ')');
        return globby.sync(patterns, {
            ignore: ['**/node_modules/**'],
            absolute: true,
            cwd: constants_1.CWD,
        });
    },
    /* istanbul ignore next */
    exitProcess(code) {
        (0, log_verbose_1.logVerbose)('exit(', code, ')');
        process.exit(code);
    },
    readConfigFileSync(configPath) {
        var _a;
        (0, log_verbose_1.logVerbose)('readConfigFileSync(', configPath, ')');
        const client = (0, cosmiconfig_1.cosmiconfigSync)('syncpack');
        const result = configPath ? client.load(configPath) : client.search();
        if (!(0, is_non_empty_object_1.isNonEmptyObject)(result)) {
            const rcPath = (0, path_1.join)(constants_1.CWD, 'package.json');
            const pjson = (0, fs_extra_1.readJsonSync)(rcPath, { throws: false });
            const rcConfig = (_a = pjson === null || pjson === void 0 ? void 0 : pjson.config) === null || _a === void 0 ? void 0 : _a.syncpack;
            if ((0, is_non_empty_object_1.isNonEmptyObject)(rcConfig))
                return rcConfig;
            (0, log_verbose_1.logVerbose)('no config file found');
            return {};
        }
        const rcPath = result.filepath;
        const rcConfig = result.config;
        (0, log_verbose_1.logVerbose)('.syncpackrc path:', rcPath);
        (0, log_verbose_1.logVerbose)('.syncpackrc contents:', rcConfig);
        return rcConfig;
    },
    /* istanbul ignore next */
    readFileSync(filePath) {
        (0, log_verbose_1.logVerbose)('readFileSync(', filePath, ')');
        return (0, fs_extra_1.readFileSync)(filePath, { encoding: 'utf8' });
    },
    /* istanbul ignore next */
    readYamlFileSync(filePath) {
        (0, log_verbose_1.logVerbose)('readYamlFileSync(', filePath, ')');
        return readYamlFile.sync(filePath);
    },
    /* istanbul ignore next */
    writeFileSync(filePath, contents) {
        (0, log_verbose_1.logVerbose)('writeFileSync(', filePath, contents, ')');
        (0, fs_extra_1.writeFileSync)(filePath, contents);
    },
};
