import { h } from 'preact';
import OpenInvoiceContainer from '../helpers/OpenInvoiceContainer';
import { OpenInvoiceContainerProps } from '../helpers/OpenInvoiceContainer/OpenInvoiceContainer';
export default class Riverty extends OpenInvoiceContainer {
    static readonly type = "riverty";
    protected static defaultProps: {
        consentCheckboxLabel?: h.JSX.Element;
        billingAddressRequiredFields?: string[];
        billingAddressSpecification?: import("../internal/Address/types").AddressSpecifications;
        allowedCountries?: string[];
        countryCode?: string;
        data?: {
            companyDetails?: import("../internal/CompanyDetails/types").CompanyDetailsSchema;
            personalDetails?: import("../../types").PersonalDetailsSchema;
            billingAddress?: import("../../types").AddressData;
            deliveryAddress?: import("../../types").AddressData;
            bankAccount?: import("../internal/OpenInvoice/types").BankDetailsSchema;
        };
        onChange?: (state: any, element?: import("../UIElement").UIElement<any>) => void;
        payButton?: any;
        showPayButton?: boolean;
        visibility?: import("../internal/OpenInvoice/types").OpenInvoiceVisibility;
        personalDetailsRequiredFields: string[];
        deliveryAddressRequiredFields?: string[];
        deliveryAddressSpecification: import("../internal/Address/types").AddressSpecifications;
        setComponentRef?: (ref: any) => void;
        showFormInstruction?: boolean;
        environment?: string;
        session?: import("../../core/CheckoutSession/CheckoutSession").default;
        onValid?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        beforeSubmit?: (state: any, element: import("../UIElement").UIElement<any>, actions: any) => Promise<void>;
        onSubmit?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        onComplete?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        onActionHandled?: (rtnObj: import("../types").ActionHandledReturnObject) => void;
        onAdditionalDetails?: (state: any, element: import("../UIElement").UIElement<any>) => void;
        onError?: (error: any, element?: import("../UIElement").UIElement<any>) => void;
        onPaymentCompleted?: (result: any, element: import("../UIElement").UIElement<any>) => void;
        beforeRedirect?: (resolve: any, reject: any, redirectData: any, element: import("../UIElement").UIElement<any>) => void;
        isInstantPayment?: boolean;
        type?: string;
        name?: string;
        icon?: string;
        amount?: import("../../types").PaymentAmount;
        secondaryAmount?: import("../../types").PaymentAmountExtended;
        brand?: string;
        setStatusAutomatically?: boolean;
        loadingContext?: string;
        createFromAction?: (action: import("../../types").PaymentAction, props: object) => import("../UIElement").UIElement<any>;
        clientKey?: string;
        paymentMethodType?: string;
        elementRef?: any;
        i18n?: import("../../language").default;
        _parentInstance?: import("../../core/core").default;
        order?: import("../../types").Order;
        modules?: {
            srPanel?: import("../../core/Errors/SRPanel").SRPanel;
            analytics?: import("../types").AnalyticsModule;
            resources?: import("../../core/Context/Resources").Resources;
            risk?: import("../../core/RiskModule").default;
        };
        isDropin?: boolean;
    };
    formatProps(props: OpenInvoiceContainerProps): any;
}
